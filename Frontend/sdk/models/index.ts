/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WeatherForecastData}
 */
export function createWeatherForecastDataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWeatherForecastData;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWeatherForecastData(weatherForecastData: Partial<WeatherForecastData> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { weatherForecastData.date = n.getDateValue(); },
        "someEnum": n => { weatherForecastData.someEnum = n.getEnumValue<TestEnum>(TestEnumObject); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWeatherForecastData(writer: SerializationWriter, weatherForecastData: Partial<WeatherForecastData> | undefined = {}) : void {
    writer.writeDateValue("date", weatherForecastData.date);
    writer.writeEnumValue<TestEnum>("someEnum", weatherForecastData.someEnum);
}
export type TestEnum = (typeof TestEnumObject)[keyof typeof TestEnumObject];
export interface WeatherForecastData extends Parsable {
    /**
     * The date property
     */
    date?: Date;
    /**
     * The someEnum property
     */
    someEnum?: TestEnum;
}
export const TestEnumObject = {
    NewEscaped: "New",
    Old: "Old",
} as const;
/* tslint:enable */
/* eslint-enable */
